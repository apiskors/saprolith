#!/bin/sh
#
# Start/stop control script for the Minecraft Bedrock Edition server.
# This runs the Mojang/Microsoft Minecraft Bedrock Server under
# screen, started via SystemD systemctl.


# Defaults, you may want to change these:
mc_user=mc ; mc_server=mc1 ; mc_serv_2=mc2
jail_dir=/data/jails/mc-1
bak_dir=/data/jails/mc-1/mc-backups
dl_dir=/data/pub/download/minecraft/bedrock-server
# See also base_dir below, where the individual server actually lives.


print_help_only_p=0 ; bad_args_exit_p=0
while getopts hs:n:u:z: OPT
do
  case $OPT in
    h)  print_help_only_p=1
        ;;
    u)  mc_user=$OPTARG
        ;;
    s)  mc_server=$OPTARG
        ;;
    n)  mc_serv_2=$OPTARG
        ;;
    z)  zip_file=$OPTARG
        ;;
    \?)
        print_help_only_p=1
        echo "ERROR:  One or more bad command line options." 1>&2
        echo 1>&2
        ;;
  esac
done
shift `expr $OPTIND - 1`

CMDNAME=`basename $0` ; bin_dir=`dirname $0` ; cmd_path=`realpath $0`
umask 002
base_dir="${jail_dir}/${mc_server}"
bs_bin="${base_dir}/bedrock_server"
      mc_service="mcb@${mc_server}.service"
mc_restart_timer="mcb_restart@${mc_server}.timer"
 mc_restart_serv="mcb_restart@${mc_server}.service"
script_user=`whoami` ; start_dir=`pwd`
cd "$base_dir" ; mkdir -p logs


USAGE="Usage:  ${CMDNAME} [-h] [-s SERVER_NAME] CMD [CMD ...]
Description:
  This runs the Mojang/Microsoft Minecraft Bedrock Server on Linux
  under screen, preferably started via SystemD systemctl.
Commands:
  status d-status d-stop backup d-start [etc.]
  Please read the script itself for details.
Options:
  -h : Show this help.
  -u : Linux user that runs the server.  Currently:  $mc_user
  -s  SERVER_NAME  :  Short name of server.  Currently:  $mc_server
      Base directory of server will be:  $base_dir
  -n  NEW_SERVER_NAME  :  Short name of new server after upgrade.  
      Only used during upgrade process.  Currently:  $mc_serv_2
  -z  BEDROCK_ZIP_FILE  :  Zip file of new server software to upgrade to.
      E.g.:  bedrock-server_2022-08-10_1.19.20.02.zip
"


if [ "$print_help_only_p" -eq 1 ] ; then
  bad_args_exit_p=1 ; echo "$USAGE"
elif [ "$1" = "" ] ; then
  bad_args_exit_p=1
  echo "Error: You must give at least one positional command argument." 1>&2
fi
if [ "$bad_args_exit_p" -ne 0 ] ; then exit ; fi


# Note, I ASSUME that our Bourne shell always has SEPARATE positional
# parameter lists for individual functions vs. the whole script.  AKA,
# do not use some ancient non-Linux Bourne shell.


# Return the screen session running this mc_server, if there is one.
# If not, return empty string.
mc_screen_session() {
  local mc_server mc_user foo
  mc_server="$1" ; mc_user="$2"
  # sc_sess is purposely global!
  if [ -z "$mc_user" -o "$mc_user" = "$script_user" ] ; then
    foo=$(screen -wipe 2>&1)
    sc_sess=`screen -list | grep "$mc_server" | head -n 1 | awk '{print($mc_server)}'`
  else
    foo=$(sudo -u $mc_user screen -wipe 2>&1)
    sc_sess=`sudo -u $mc_user screen -list | grep "$mc_server" | head -n 1 | awk '{print($mc_server)}'`
  fi

}

print_running_info() {
  local f_log
  f_log=`ls -1t ${1}/logs/${2}.* | head -n 1`
  echo "Log file is probably:  $f_log"
  echo "To get to its Server console do:  screen -e^Oo -r ${2}"
  echo "Disconnect from that screen session with:  Ctrl-o d"
  echo "Of if it is a second inner screen session, disconnect with:  Ctrl-o o d"
}


# Main loop around input commands!
cmd_p=0
for arg in "$@"
do
  if [ "$cmd_p" -eq 1 ] ; then
    cmd_p=0 ; screen -Rd $mc_server -X stuff "${arg}$(printf '\r')"
  elif [ "cmd" = "$arg" ] ; then
    # Next argument is the command to send to the running bedrock_server.
    # Rember to enclose your command string in single quotes on the command line!
    cmd_p=1 ; continue

  elif [ "start" = "$arg" ] ; then
    # Call this from your SystemD *.service file.
    # It will also work interactively, but you usually do not want to do that.

    mc_screen_session $mc_server ''  # Sets sc_sess.
    if [ "" = "$sc_sess" ] ; then running_p=0 ; else running_p=1 ; fi
    if [ 1 -eq "$running_p" ] ; then
      echo "Minecraft Server $mc_server is already running under screen!" 1>&2
      print_running_info $base_dir $mc_server
    else
      f_log="${base_dir}/logs/${mc_server}.$(date +%Y-%m).log"
      echo "Starting Minecraft Server:  $mc_server  As Linux user:  $script_user"
      echo "Logging to file:  $f_log"
      screen -e^Oo -L -Logfile $f_log -dm -S $mc_server /bin/sh -c "LD_LIBRARY_PATH=$base_dir $bs_bin"
    fi

  elif [ "status" = "$arg" ] ; then
    mc_screen_session $mc_server $mc_user  # Sets sc_sess.
    if [ "" = "$sc_sess" ] ; then running_p=0 ; else running_p=1 ; fi
    wait_pid=`echo "$sc_sess" | awk -F. '{print($1)}'`
    echo "Minecraft Server $mc_server running yes-1 or no-0:  $running_p  Shell pid:  $wait_pid"
    if [ 1 -eq "$running_p" ] ; then
      print_running_info $base_dir $mc_server
    fi

  elif [ "stop" = "$arg" ] ; then
    # Call this from your SystemD *.service file.
    # It will also work interactively, but you usually do not want to do that.
    #
    # SystemD can report the tree of PIDs like this:
    #   systemctl status mcb@mc1.service
    # But for now we will NOT use that, so that this command can work the
    # same way both under SystemD and not.

    mc_screen_session $mc_server ''  # Sets sc_sess.
    if [ "" = "$sc_sess" ] ; then running_p=0 ; else running_p=1 ; fi
    if [ 0 -eq "$running_p" ] ; then
      echo "Error: ${CMDNAME}: ${arg}:  Minecraft Server $mc_server is down, or NOT running under screen." 1>&2
      continue
    fi
    wait_pid=`echo "$sc_sess" | awk -F. '{print($1)}'`

    echo "Stopping Minecraft Server:  $mc_server  Child of shell pid:  $wait_pid"
    screen -Rd $mc_server -X stuff "say Stopping server right now!$(printf '\r')"
    screen -Rd $mc_server -X stuff "stop$(printf '\r')"
    running_p=1 ; ii=0
    while [ "$running_p" -eq 1 -a "$ii" -lt 20 ] ; do
      running_p=`pgrep -cg $wait_pid`
      if [ "$running_p" -eq 0 ] ; then break ; fi
      sleep 1 ; ii=$((++ii))
    done

    if [ "$running_p" -eq 1 ] ; then
      echo "Warning: Server $mc_server still running, killing screen session." 1>&2
      screen -S $mc_server -X quit
    fi
    ii=0 ; while [ "$running_p" -eq 1 -a "$ii" -lt 10 ] ; do
      running_p=`pgrep -cg $wait_pid`
      if [ "$running_p" -eq 0 ] ; then break ; fi
      sleep 1 ; ii=$((++ii))
    done
    if [ "$running_p" -eq 1 ] ; then
      echo "Error: Server $mc_server still running, killing it now!" 1>&2
      kill $wait_pid
    fi

  elif [ "backup" = "$arg" ] ; then
    # Stop the server first!  Make sure SystemD does NOT restart it until
    # we are done.

    mc_screen_session $mc_server $mc_user  # Sets sc_sess.
    if [ "" = "$sc_sess" ] ; then running_p=0 ; else running_p=1 ; fi
    if [ 1 -eq "$running_p" ] ; then
      echo "Error: ${CMDNAME}: Cannot backup, server is still running!  Run d-stop first." 1>&2
      print_running_info $base_dir $mc_server
      continue
    fi
    if [ ! -d "worlds" ] ; then
      echo "Error: ${CMDNAME}: Cannot backup, no worlds directory found in:  $base_dir" 1>&2
      continue
    fi

    # Colons in the tarball filename will confuse tar, avoid them.
    f_bak="${bak_dir}/${mc_server}.$(date +%Y-%m-%dT%H-%M-%S).tar.zst"
    echo "Backing up server $mc_server to:  $f_bak"
    cd "$jail_dir"

    tar -I zstdmt -pcf "$f_bak" ${mc_server}/*.json ${mc_server}/server.properties ${mc_server}/worlds ${mc_server}/logs
    cd "$base_dir"

  elif [ "d-enable" = "$arg" ] ; then
    # See install instructions in readme.txt.
    # Do this at least once when installing a mc_server instance, e.g. "mc1" or "mc2".
    systemctl daemon-reload
    systemctl enable $mc_service $mc_restart_timer

  elif [ "d-disable" = "$arg" ] ; then
    # Do this when removing an old mc_server instance.  E.g., if you
    # upgraded from mc1 to mc2, do this for mc1 so it will not try to
    # auto-start on boot.

    systemctl daemon-reload
    systemctl disable $mc_service $mc_restart_timer $mc_restart_serv

  elif [ "d-status" = "$arg" ] ; then
    systemctl status $mc_service $mc_restart_timer $mc_restart_serv
    # See also:  journalctl -u mcb@mc1.service -u mcb_restart@mc1.timer -u mcb_restart@mc1.service

  elif [ "d-start" = "$arg" ] ; then
    systemctl start $mc_service $mc_restart_timer

  elif [ "d-stop" = "$arg" ] ; then
    systemctl stop $mc_service $mc_restart_timer

  elif [ "svc-diff" = "$arg" ] ; then
    lslt="ls -l --full-time"
    cd "$start_dir"
    $lslt "${bin_dir}/systemd/mcb@.service"          /etc/systemd/system/mcb@.service
    diff  "${bin_dir}/systemd/mcb@.service"          /etc/systemd/system/mcb@.service
    echo
    $lslt "${bin_dir}/systemd/mcb_restart@.service"  /etc/systemd/system/mcb_restart@.service
    diff  "${bin_dir}/systemd/mcb_restart@.service"  /etc/systemd/system/mcb_restart@.service
    echo
    $lslt "${bin_dir}/systemd/mcb_restart@.timer"    /etc/systemd/system/mcb_restart@.timer
    diff  "${bin_dir}/systemd/mcb_restart@.timer"    /etc/systemd/system/mcb_restart@.timer
    cd "$base_dir"

  elif [ "download-server" = "$arg" ] ; then
    # This downloads the the server software, but only if we do not
    # already have the same version number.

    cd "$dl_dir"
    now_ymd=`date +%Y-%m-%d`
    curl_opts="-s -H 'Accept-Encoding: identity' -H 'Accept-Language: en' -L -A 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.33 (KHTML, like Gecko) Chrome/90.0.$RandNum.212 Safari/537.33'"
    hh=`eval curl $curl_opts https://minecraft.net/en-us/download/server/bedrock/`
    url=`echo $hh | grep -o 'https://minecraft.azureedge.net/bin-linux/[^"]*'`
    new_ver=`echo $url | grep -o '[0-9.]*[.]zip$'`
    have_versions=`ls -1 ${dl_dir}/bedrock*.zip | grep -o '[0-9.]*[.]zip$'`
    new_file=`echo $url | grep -o '[^/]*[.]zip$' | sed "s%server-%server_${now_ymd}_%"`

    new_p=1 ; for oo in $have_versions ; do
      if [ "$new_ver" = "$oo" ] ; then
        new_p=0 ; break
      fi
    done
    if [ 1 -eq "$new_p" ] ; then
      echo "File: $new_file  New_p: $new_p  Version: $new_ver  URL: $url"
      echo "Downloading new file now from:  $url"
      eval curl $curl_opts -o "$new_file" "$url"
    fi
    cd "$base_dir"

  elif [ "upgrade" = "$arg" ] ; then
    ok_p=1
    upgrade_dir="${jail_dir}/${mc_serv_2}"
    zip_latest_path=`ls -1t ${dl_dir}/bedrock-server_*.zip | head -n 1`
    zip_latest_file=`basename $zip_latest_path`

    if [ "" = "$zip_file" ] ; then
      ok_p=0
      echo "Error: ${CMDNAME}: To use the upgrade command you MUST specify '-z BEDROCK_ZIP_FILE', e.g.:" 1>&2
      echo "   sudo ${CMDNAME} -s $mc_server -n $mc_serv_2 -z $zip_latest_file upgrade" 1>&2
    fi

    zip_path=""
    zp_1=`realpath -q "${zip_file}"`
    if [ "" = "$zip_path" -a -e "$zp_1" ] ; then  zip_path="$zp_1" ; fi
    zp_1=`realpath -q "${dl_dir}/${zip_file}"`
    if [ "" = "$zip_path" -a -e "$zp_1" ] ; then  zip_path="$zp_1" ; fi
    if [ "" = "$zip_path" ] ; then
      ok_p=0
      echo "Error: ${CMDNAME}: Cannot find zip file:  ${zip_file}" 1>&2
    fi

    cd "$jail_dir" ; umask 002 ; mkdir -p "$upgrade_dir"
    if [ $? -gt 0 ] ; then  ok_p=0 ; fi
    if [ "root" != "$script_user" ] ; then
      ok_p=0
      echo "Error: ${CMDNAME}: The upgrade MUST be run as root.  Please use sudo." 1>&2
    else
      chmod 2775 "$upgrade_dir" ; chgrp "$mc_user" "$upgrade_dir"
    fi
    n_files=`find "$upgrade_dir" -mindepth 1 -print | wc -l`
    if [ "$n_files" -gt 0 ] ; then
      ok_p=0
      echo "Error: ${CMDNAME}: The new upgrade-to directory MUST be completely empty:  $upgrade_dir" 1>&2
    fi

    cd "$upgrade_dir"
    if [ $? -gt 0 ] ; then  ok_p=0 ; fi
    if [ "$ok_p" -lt 1 ] ; then
      echo "Turning OFF actual upgrade, PRETENDING to upgrade for debugging purposes..." 1>&2
    fi

    echo "Using new Bedrock Server software:  $zip_path"
    echo "Unzipping into:  $upgrade_dir"
    if [ "$ok_p" -ge 1 ] ; then
      sudo -u "$mc_user" unzip -q "$zip_path"
      mkdir -p NEW-stock
      cp -p allowlist.json permissions.json server.properties NEW-stock/
    fi

    echo "Turning off and backing up old server:  $mc_server"
    if [ "$ok_p" -ge 1 ] ; then
      sudo "$cmd_path" -u $mc_user -s $mc_server d-stop backup d-disable
    fi
    f_bak=`ls -1t ${bak_dir}/${mc_server}.*.tar.zst | head -n 1`

    echo "Restoring from latest backup file:  $f_bak"
    if [ "$ok_p" -ge 1 ] ; then
      sudo -u "$mc_user" tar xf "$f_bak"
      old_dir="OLD-${mc_server}" ; mv "$mc_server" "$old_dir"
      rm -f "$old_dir/valid_known_packs.json"
      mv ${old_dir}/* . ; rmdir ${old_dir}
    fi

    echo "Turning on new server:  $mc_serv_2"
    if [ "$ok_p" -ge 1 ] ; then
      sudo "$cmd_path" -u $mc_user -s $mc_serv_2 d-enable d-start d-status
    fi
    ps -u $mc_user -f

    cd "$base_dir"
  else
    echo "Error: ${CMDNAME}: Unknown command argument:  $arg" 1>&2
  fi
done
